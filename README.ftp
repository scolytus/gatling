gatling now also speaks FTP, and it is enabled per default.
Disable it with -F.

Working around itojun's disabled IPv4-mapped IPv6 addresses is even
worse for FTP than it is for HTTP.  I'm not going to waste my time on
this for now.  Please ask itojun himself to prove how "easy" or even
"trivial" it is to do this, as he always claims it is.

Like HTTP will try to bind to port 80 and 8000, FTP will try binding to
port 21 and 2121.  To specify the FTP port, use -f -p [port].  Example:

  gatling -p 81 -f -p 2100

would run a HTTP server on port 81 and an FTP server on port 2100.  For
now, HTTP and FTP will always bind to the same IP number.

Please note:

  a) No TELNET sequences.
     These are _really_ obsolete, a pain in the ass to implement, and
     have even been used as means to avoid intrusion detection systems
     due to the obscurity.

  b) The path checking deliberately _allows_ to leave the file system,
     as long as you follow a symbolic link in the process.  That means,
     if you symlink out of the FTP file system (and the destination is in
     the chroot jail), gatling will allow FTP (and HTTP!) users to
     follow the symlink.  However, following a directory symlink and
     appending "/../" will not follow the .. directory entry from the
     target directory of the symlink, as an attacker may hope.

     The idea is to make it easy to create an FTP Server by putting a
     few symlinks to directories you want to export in an empty
     directory and starting gatling there.

  c) Like for HTTP, gatling will do virtual hosting, i.e. if the client
     connected to IP 10.1.1.23 on port 21, gatling will look for the
     exported data in the directory "10.1.1.23:21".
